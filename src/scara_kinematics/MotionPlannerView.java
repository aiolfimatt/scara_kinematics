/*
 * MotionPlannerView.java
 */

package scara_kinematics;

import java.awt.Color;
import javax.swing.event.TableModelEvent;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * The application's main frame.
 */
public class MotionPlannerView extends FrameView implements ActionListener, TableModelListener  {
    
    int BOARD_X_TOT = 300;
    int BOARD_Y_TOT = 300;
    int BOARD_X_POS = 100;
    int BOARD_Y_POS = 15;
    //
    GraphView view;
    MotionObject m;
    Board b;
    boolean fire_events = false;
    int current_index = 0;
    int DELAY = 40;
    int step_ms = 0;
    int acc_ms = 0;
    Timer t_graph;
    //
    public MotionPlannerView(SingleFrameApplication app) {
        super(app);
        this.getFrame().setTitle("SCARAmotion");
        initComponents();
        jTable1.getModel().addTableModelListener(this);
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextPoints = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "SCARA_line", "SCARA_cam" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setName("jList1"); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane2.setViewportView(jTable1);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(scara_kinematics.MotionPlannerApp.class).getContext().getResourceMap(MotionPlannerView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setActionCommand(resourceMap.getString("jButton2.actionCommand")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextTime.setText(resourceMap.getString("jTextTime.text")); // NOI18N
        jTextTime.setName("jTextTime"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextPoints.setText(resourceMap.getString("jTextPoints.text")); // NOI18N
        jTextPoints.setName("jTextPoints"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jTextTime, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(65, 65, 65))
                            .addComponent(jTextPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                            .addGap(321, 321, 321)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(5, 5, 5)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(4, 4, 4)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
int index = jList1.getSelectedIndex();

switch(index)
{
    case 0: {
        loadScara();
    }
    break;
    case 1:{
        loadScaraCam();
    }
    default:
    break;
}
}//GEN-LAST:event_jList1MouseClicked

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
try
{
    if(t_graph != null)
    {
        t_graph.stop();
    }
    if( m != null)
    {
        m.n_points = Integer.parseInt(jTextPoints.getText().trim());
        m.time_interval = Double.parseDouble(jTextTime.getText().trim());
        if(generateTrajectory())
        {
            double time_interval;
            time_interval = Double.parseDouble(jTextTime.getText().trim());
            current_index = 0;
            step_ms = (int)((time_interval * 1000) / m.n_points) ;
            acc_ms = 0;
            t_graph = new Timer(DELAY,this);
            t_graph.start();
        }
    }
}
catch(Exception e)
{
    e.printStackTrace();
}
}//GEN-LAST:event_jButton2ActionPerformed

protected double getTimeInterval()
{
    return Double.parseDouble(jTextTime.getText().trim());
}

protected int getNPoints()
{
    return Integer.parseInt(jTextPoints.getText().trim());
}

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
if(t_graph != null)
    t_graph.stop();
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
try
{   
  JFileChooser fc = new JFileChooser();
  File file;
  SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yy HH-mm-ss");
  Date date = new Date();
  File auau = new File(""+(String)jList1.getSelectedValue()+"_"+dateFormat.format(date)+".dat");
  fc.setSelectedFile(auau);
  int returnVal = fc.showSaveDialog(this.getFrame());
  if (returnVal == JFileChooser.APPROVE_OPTION) {
      file = new File(""+fc.getSelectedFile());
      FileOutputStream f = new FileOutputStream(file);
      PrintWriter writer = new PrintWriter(f);
      for(int i = 0; i<jTable1.getRowCount(); i++)
      {
          writer.write(""+jTable1.getValueAt(i, 0)+";"+jTable1.getValueAt(i, 1)+"\n");
      }
      writer.write("Number of points;"+Integer.parseInt(jTextPoints.getText().trim())+"\n");
      writer.write("Time interval;"+Double.parseDouble(jTextTime.getText().trim())+"\n");
      writer.close();
      
      writer.close();file = new File(""+ fc.getSelectedFile().getParent().toString()+"/motor1.txt");
      f = new FileOutputStream(file);
      writer = new PrintWriter(f);
      for(int i=0;i<m.motor1_points.size();i++)
      {
          writer.write(""+String.format("%.4f",(Double)m.motor1_points.get(i))+"\n");
      }
      writer.close();
      writer.close();file = new File(""+ fc.getSelectedFile().getParent().toString()+"/motor2.txt");
      f = new FileOutputStream(file);
      writer = new PrintWriter(f);
      for(int i=0;i<m.motor2_points.size();i++)
      {
          writer.write(""+String.format("%.4f",(Double)m.motor2_points.get(i))+"\n");
      }
      writer.close();
      JOptionPane.showMessageDialog(this.getFrame(),"Saved ");
  }
}
catch(Exception e)
{
    e.printStackTrace();
}
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
try
{
  JFileChooser fc = new JFileChooser();
  File file;  
  String read;
  int index = jList1.getSelectedIndex();
  cleanTable();
  int returnVal = fc.showSaveDialog(this.getFrame());
  if (returnVal == JFileChooser.APPROVE_OPTION) {
      switch(index)
      {
          case 0:
          {
              m = new Scara(false);
          }
          break;
          case 1:
          {
              m = new Scara_cam(false);
          }
          break;
          default:
          break;
      }
      file = new File(""+fc.getSelectedFile());
      FileReader fin = new FileReader(file);
      BufferedReader reader = new BufferedReader(fin);
      read = reader.readLine();
      while (read != null)
      {
        StringTokenizer st = new StringTokenizer(read,";");
        String name = st.nextToken();
        if(name.equals("Number of points"))
        {
            int n = Integer.parseInt(st.nextToken().trim());
            m.setNPoints(n);
        }
        else if(name.equals("Time interval"))
        {
            Double t = Double.parseDouble(st.nextToken().trim());
            m.setTimeInterval(t);
        }
        else
        {
            Double value = Double.parseDouble(st.nextToken().trim());
            m.addParameter(name,value);
        }
        read = reader.readLine();
      }
      loadTable();
  }
}
catch(Exception e)
{
    e.printStackTrace();
}
}//GEN-LAST:event_jButton5ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try
{
    if(t_graph != null)
    {
        t_graph.stop();
    }
    if( m != null)
    {
        m.n_points = Integer.parseInt(jTextPoints.getText().trim());
        if(generateTrajectory())
        {
            view = new GraphView(this);
            view.Form_grafici.setSize(600, 300);
            view.Form_grafici.setVisible(true);
            view.Form_grafici.setAlwaysOnTop(true);
        }
    }
}
catch(Exception e)
{
    e.printStackTrace();
}
}//GEN-LAST:event_jButton1ActionPerformed

public void cleanTable()
{
    fire_events = false;
    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
    int numRows = dtm.getRowCount();
    for(int i=(numRows-1);i>=0;i--) {
        dtm.removeRow(i);
        jTable1.revalidate();
    }
    fire_events = true;
}


public void loadScara()
{
    m = new Scara(true);
    cleanTable();
    loadTable();
}

public void loadScaraCam()
{
    m = new Scara_cam(true);
    cleanTable();
    loadTable();
}
public void loadTable()
{
    fire_events = false;
    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
    for(int i=0;i<m.parameters.size();i++)
    {
        dtm.addRow(new Object[]{m.parameters.get(i),m.values.get(i)});
    }
    fire_events = true;
    jTextPoints.setText(""+m.n_points);
    jTextTime.setText(""+m.time_interval);
    generateTrajectory();
}
public void returnFromGrafici()
{
    view.Form_grafici.setVisible(false);
}
public boolean generateTrajectory()
{
   boolean result = m.generateTrajectory();
   if(result)
    paintGeometry();
   else
       JOptionPane.showMessageDialog(this.getFrame(),""+m.errorString);
   return result;
      
}

public void paintGeometry()
{
    if ( b != null)
        mainPanel.remove(b);
    b = new Board(m);
    mainPanel.add(b);
    b.setBackground(Color.white);
    b.setLocation(BOARD_X_POS, BOARD_Y_POS);
    b.setSize(BOARD_X_TOT, BOARD_Y_TOT);
    b.setVisible(true);
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextPoints;
    private javax.swing.JTextField jTextTime;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

 public void actionPerformed(ActionEvent e) {
     
     acc_ms+= DELAY;
     if (acc_ms >= (m.time_interval*1000))
     {
        acc_ms = 0;      
     }
     current_index = (int)(acc_ms /(m.time_interval*1000) * m.n_points);
     m.generateGraphPoints(current_index,b.getWidth(),b.getHeight());
     b.repaint();    
    }

    public void tableChanged(TableModelEvent e) {
        if(fire_events)
        {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if(column == 1)
            {
                TableModel model = (TableModel)e.getSource();
                String columnName = model.getColumnName(column);
                double data = (Double)model.getValueAt(row, column);
                if(m != null)
                    m.values.set(row, data);
            }
        }
    }
    
    

   

   
}
